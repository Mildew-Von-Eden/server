// NOTE: This file is autogenerated!
// If you want to update it or add new settings, use tools/generate_settings.py

#pragma once

#include <string>
#include <unordered_map>
#include <variant>

enum class MainSettings
{
    SERVER_NAME, // (string) The name of the server
    ENABLE_COP, // (bool) Enables expansion: Chains of Promathia
    ENABLE_TOAU, // (bool) Enables expansion: Treasure of Aht Urghan
    ENABLE_WOTG, // (bool) Enables expansion: Wings of the Goddess
    ENABLE_ACP, // (bool) Enables mini-expansion: A Crystaline Prophecy
    ENABLE_AMK, // (bool) Enables mini-expansion: A Moogle Kupo d'Etat
    ENABLE_ASA, // (bool) Enables mini-expansion: A Shantotto Ascenscion
    ENABLE_ABYSSEA, // (bool) Enables expansion: Abyssea
    ENABLE_SOA, // (bool) Enables expansion: Seekers of Adoulin
    ENABLE_ROV, // (bool) Enables expansion: Rhapsodies of Vana'diel
    ENABLE_VOIDWATCH, // (bool) Enables Voidwatch (Not an expansion
    DAMAGE_MULT, // (float) The multiplier applied to all damage directed towards players
};

enum class SqlSettings
{
    HOST, // (string) The IP Address of the host machine
    PORT, // (uint) The Port
    LOGIN, // (string) The Login
    PASSWORD, // (string) The Password
    DATABASE, // (string) The Database
};

enum class LoggingSettings
{
    ENABLED, // (bool) Whether or not logging is on
    TIMESTAMP_FORMAT, // (string) Timestamp format
    ENABLE_STANDARD, // (bool) Enable standard logging messages (ShowStandard(...))
    ENABLE_INFO, // (bool) Enable standard logging messages (ShowStandard(...))
    ENABLE_NOTICE, // (bool) Enable standard logging messages (ShowStandard(...))
    ENABLE_WARN, // (bool) Enable standard logging messages (ShowStandard(...))
    ENABLE_DEBUG, // (bool) Enable debug logging messages (ShowDebug(...))
    ENABLE_ERROR, // (bool) Enable x logging messages
    ENABLE_FATAL_ERROR, // (bool) Enable x logging messages
    ENABLE_SQL, // (bool) Enable x logging messages
    ENABLE_LUA, // (bool) Enable x logging messages
    ENABLE_NAVMESH, // (bool) Enable x logging messages
    ENABLE_ACTION, // (bool) Enable x logging messages
    ENABLE_EXPLOIT, // (bool) Enable x logging messages
};

enum class LoginSettings
{
    ENABLED, // (bool) Whether or not logging is on
    DATA_IP, // (string) Data IP
    DATA_PORT, // (uint) Data Port
    VIEW_IP, // (string) View IP
    VIEW_PORT, // (uint) View Port
    AUTH_IP, // (string) Auth IP
    AUTH_PORT, // (uint) Auth Port
};

enum class MapSettings
{
    ENABLED, // (bool) Whether or not logging is on
};

enum class SearchSettings
{
    ENABLED, // (bool) Whether or not logging is on
    SERVER_PORT, // (uint) Search server port
};

enum class WorldSettings
{
    ENABLED, // (bool) Whether or not logging is on
};

enum class ZmqSettings
{
    SERVER_IP, // (string) The IP of the machine ZMQ operates on. THIS SHOULD BE YOUR LOCAL MACHINE!
    SERVER_PORT, // (uint) The port ZMQ operates on (inter-process messaging)
};

enum class VersionSettings
{
    CLIENT_VER, // (string) Expected Client version (wrong version cannot log in)
    VER_LOCK, // (uint) Version lock scheme
};

enum class TrustsSettings
{
    ENABLE_TRUST_CASTING, // (bool) 
    ENABLE_TRUST_QUESTS, // (bool) 
};

using variant_settings_t = std::variant<
   MainSettings,
   SqlSettings,
   LoggingSettings,
   LoginSettings,
   MapSettings,
   SearchSettings,
   WorldSettings,
   ZmqSettings,
   VersionSettings,
   TrustsSettings
>;

std::unordered_map<std::string, variant_settings_t> variant_settings_lookup;

void populate_settings_lookup()
{
    variant_settings_lookup["MainSettings::SERVER_NAME"] = MainSettings::SERVER_NAME;
    variant_settings_lookup["MainSettings::ENABLE_COP"] = MainSettings::ENABLE_COP;
    variant_settings_lookup["MainSettings::ENABLE_TOAU"] = MainSettings::ENABLE_TOAU;
    variant_settings_lookup["MainSettings::ENABLE_WOTG"] = MainSettings::ENABLE_WOTG;
    variant_settings_lookup["MainSettings::ENABLE_ACP"] = MainSettings::ENABLE_ACP;
    variant_settings_lookup["MainSettings::ENABLE_AMK"] = MainSettings::ENABLE_AMK;
    variant_settings_lookup["MainSettings::ENABLE_ASA"] = MainSettings::ENABLE_ASA;
    variant_settings_lookup["MainSettings::ENABLE_ABYSSEA"] = MainSettings::ENABLE_ABYSSEA;
    variant_settings_lookup["MainSettings::ENABLE_SOA"] = MainSettings::ENABLE_SOA;
    variant_settings_lookup["MainSettings::ENABLE_ROV"] = MainSettings::ENABLE_ROV;
    variant_settings_lookup["MainSettings::ENABLE_VOIDWATCH"] = MainSettings::ENABLE_VOIDWATCH;
    variant_settings_lookup["MainSettings::DAMAGE_MULT"] = MainSettings::DAMAGE_MULT;

    variant_settings_lookup["SqlSettings::HOST"] = SqlSettings::HOST;
    variant_settings_lookup["SqlSettings::PORT"] = SqlSettings::PORT;
    variant_settings_lookup["SqlSettings::LOGIN"] = SqlSettings::LOGIN;
    variant_settings_lookup["SqlSettings::PASSWORD"] = SqlSettings::PASSWORD;
    variant_settings_lookup["SqlSettings::DATABASE"] = SqlSettings::DATABASE;

    variant_settings_lookup["LoggingSettings::ENABLED"] = LoggingSettings::ENABLED;
    variant_settings_lookup["LoggingSettings::TIMESTAMP_FORMAT"] = LoggingSettings::TIMESTAMP_FORMAT;
    variant_settings_lookup["LoggingSettings::ENABLE_STANDARD"] = LoggingSettings::ENABLE_STANDARD;
    variant_settings_lookup["LoggingSettings::ENABLE_INFO"] = LoggingSettings::ENABLE_INFO;
    variant_settings_lookup["LoggingSettings::ENABLE_NOTICE"] = LoggingSettings::ENABLE_NOTICE;
    variant_settings_lookup["LoggingSettings::ENABLE_WARN"] = LoggingSettings::ENABLE_WARN;
    variant_settings_lookup["LoggingSettings::ENABLE_DEBUG"] = LoggingSettings::ENABLE_DEBUG;
    variant_settings_lookup["LoggingSettings::ENABLE_ERROR"] = LoggingSettings::ENABLE_ERROR;
    variant_settings_lookup["LoggingSettings::ENABLE_FATAL_ERROR"] = LoggingSettings::ENABLE_FATAL_ERROR;
    variant_settings_lookup["LoggingSettings::ENABLE_SQL"] = LoggingSettings::ENABLE_SQL;
    variant_settings_lookup["LoggingSettings::ENABLE_LUA"] = LoggingSettings::ENABLE_LUA;
    variant_settings_lookup["LoggingSettings::ENABLE_NAVMESH"] = LoggingSettings::ENABLE_NAVMESH;
    variant_settings_lookup["LoggingSettings::ENABLE_ACTION"] = LoggingSettings::ENABLE_ACTION;
    variant_settings_lookup["LoggingSettings::ENABLE_EXPLOIT"] = LoggingSettings::ENABLE_EXPLOIT;

    variant_settings_lookup["LoginSettings::ENABLED"] = LoginSettings::ENABLED;
    variant_settings_lookup["LoginSettings::DATA_IP"] = LoginSettings::DATA_IP;
    variant_settings_lookup["LoginSettings::DATA_PORT"] = LoginSettings::DATA_PORT;
    variant_settings_lookup["LoginSettings::VIEW_IP"] = LoginSettings::VIEW_IP;
    variant_settings_lookup["LoginSettings::VIEW_PORT"] = LoginSettings::VIEW_PORT;
    variant_settings_lookup["LoginSettings::AUTH_IP"] = LoginSettings::AUTH_IP;
    variant_settings_lookup["LoginSettings::AUTH_PORT"] = LoginSettings::AUTH_PORT;

    variant_settings_lookup["MapSettings::ENABLED"] = MapSettings::ENABLED;

    variant_settings_lookup["SearchSettings::ENABLED"] = SearchSettings::ENABLED;
    variant_settings_lookup["SearchSettings::SERVER_PORT"] = SearchSettings::SERVER_PORT;

    variant_settings_lookup["WorldSettings::ENABLED"] = WorldSettings::ENABLED;

    variant_settings_lookup["ZmqSettings::SERVER_IP"] = ZmqSettings::SERVER_IP;
    variant_settings_lookup["ZmqSettings::SERVER_PORT"] = ZmqSettings::SERVER_PORT;

    variant_settings_lookup["VersionSettings::CLIENT_VER"] = VersionSettings::CLIENT_VER;
    variant_settings_lookup["VersionSettings::VER_LOCK"] = VersionSettings::VER_LOCK;

    variant_settings_lookup["TrustsSettings::ENABLE_TRUST_CASTING"] = TrustsSettings::ENABLE_TRUST_CASTING;
    variant_settings_lookup["TrustsSettings::ENABLE_TRUST_QUESTS"] = TrustsSettings::ENABLE_TRUST_QUESTS;
};
