# Generate C++ and Lua settings files from the <root>/tools/settings.template file.
# To be run from the <root>/tools/ directory.

def write_lua_settings_files(headers):
    for current_header, header_entries in headers.items():
        with open(f"../settings/default/{current_header}.lua", "w") as fd:
            # Header
            output = f"""-- NOTE: This file is autogenerated!
-- You can (and should) change the values in here to whatever you desire.
-- If you want to add new settings, go look at tools/generate_settings.py

xi = xi or {{}}
xi.settings = xi.settings or {{}}

xi.settings.{current_header} =
{{
"""
            for v in header_entries:
                type = v[0]
                name = v[1]
                value = v[2]
                description = v[3]

                # Content
                if type == "string":
                    output += f"    {name} = \"{value}\", -- ({type}) {description}\n"
                else:
                    output += f"    {name} = {value}, -- ({type}) {description}\n"

            # Footer
            output += f"}}\n"
            fd.write(output)

def write_cpp_settings_files(headers):
    with open(f"../src/common/settings_impl.h", "w") as fd:
        output = "// NOTE: This file is autogenerated!\n// If you want to update it or add new settings, use tools/generate_settings.py\n\n"
        output += "#pragma once\n\n#include <string>\n#include <unordered_map>\n#include <variant>\n\n"

        # Content
        for current_header, header_entries in headers.items():
            output += f"enum class {current_header.capitalize()}Settings\n{{\n"
            for v in header_entries:
                type = v[0]
                name = v[1]
                #value = v[2]
                description = v[3]

                output += f"    {name}, // ({type}) {description}\n"
            output += "};\n\n"

        output += "using variant_settings_t = std::variant<\n"
        for current_header, header_entries in headers.items():
            output += f"   {current_header.capitalize()}Settings,\n"
        output = output[:-2]
        output += "\n>;\n\n"

        output += "std::unordered_map<std::string, variant_settings_t> variant_settings_lookup;\n\n"

        output += "void populate_settings_lookup()\n{\n"
        for current_header, header_entries in headers.items():
            for v in header_entries:
                name = v[1]
                output += f"    variant_settings_lookup[\"{current_header.capitalize()}Settings::{name}\"] = {current_header.capitalize()}Settings::{name};\n"
            output += "\n"

        output = output[:-1]

        output += "};\n"

        fd.write(output)

def main():
    list = []
    with open('./settings.template', 'r') as fd:
        list = fd.readlines()

    headers = {}
    current_header = ""

    for line in list:
        line = line.strip()

        # Comments
        if line.startswith("#") or line == "":
            continue

        if "#" in line:
            # TODO: This is kinda fragile
            line = line.split("#")[0]

        # Start of a section header
        if line.startswith("["):
            current_header = line.replace("[", "").replace("]", "").strip()
            headers[current_header] = []
            continue

        if current_header == "":
            print("current_header is empty!")
            exit()

        parts = line.split(",")
        type = parts[0].strip()
        name = parts[1].strip()
        value = parts[2].strip()
        description = parts[3].strip()

        headers[current_header].append((type, name, value, description))

        write_lua_settings_files(headers)
        write_cpp_settings_files(headers)

if __name__ == "__main__":
    main()
